/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/events/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List Events */
    get: operations['api_events_list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show Events */
    get: operations['root_retrieve']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/access-codes/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List Access Codes */
    get: operations['access_codes_list']
    put?: never
    /** Create Access Code */
    post: operations['access_codes_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/access-codes/{id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show Access Code */
    get: operations['access_codes_retrieve']
    /** Update Access Code */
    put: operations['access_codes_update']
    post?: never
    /** Delete Access Code */
    delete: operations['access_codes_destroy']
    options?: never
    head?: never
    /** Update Access Code (Partial Update) */
    patch: operations['access_codes_partial_update']
    trace?: never
  }
  '/api/events/{event}/answers/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List Answers */
    get: operations['answers_list']
    put?: never
    /** Create Answer */
    post: operations['answers_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/answers/{id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show Answer */
    get: operations['answers_retrieve']
    /**
     * Update Answer
     * @description Please note that you cannot change an answer’s related objects (question, submission, review, person).
     */
    put: operations['answers_update']
    post?: never
    /** Delete Answer */
    delete: operations['answers_destroy']
    options?: never
    head?: never
    /**
     * Update Answer (Partial Update)
     * @description Please note that you cannot change an answer’s related objects (question, submission, review, person).
     */
    patch: operations['answers_partial_update']
    trace?: never
  }
  '/api/events/{event}/mail-templates/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List Mail Templates */
    get: operations['mail_templates_list']
    put?: never
    /** Create Mail Template */
    post: operations['mail_templates_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/mail-templates/{id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show Mail Template */
    get: operations['mail_templates_retrieve']
    /** Update Mail Template */
    put: operations['mail_templates_update']
    post?: never
    /** Delete Mail Template */
    delete: operations['mail_templates_destroy']
    options?: never
    head?: never
    /** Update Mail Template (Partial Update) */
    patch: operations['mail_templates_partial_update']
    trace?: never
  }
  '/api/events/{event}/question-options/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List Question Options */
    get: operations['question_options_list']
    put?: never
    /** Create Question Option */
    post: operations['question_options_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/question-options/{id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show Question Option */
    get: operations['question_options_retrieve']
    /** Update Question Option */
    put: operations['question_options_update']
    post?: never
    /**
     * Delete Question Option
     * @description Deleting a question option is only possible if it hasn't been used in any answers yet.
     */
    delete: operations['question_options_destroy']
    options?: never
    head?: never
    /** Update Question Option (Partial Update) */
    patch: operations['question_options_partial_update']
    trace?: never
  }
  '/api/events/{event}/questions/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List Questions */
    get: operations['questions_list']
    put?: never
    /** Create Question */
    post: operations['questions_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/questions/{id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show Question */
    get: operations['questions_retrieve']
    /**
     * Update Question
     * @description Please note that any update to the options field will delete the existing question options (if still possible) and replace them with the new ones. Use the AnswerOption API for granular question option modifications.
     */
    put: operations['questions_update']
    post?: never
    /** Delete Question */
    delete: operations['questions_destroy']
    options?: never
    head?: never
    /**
     * Update Question (Partial Update)
     * @description Please note that any update to the options field will delete the existing question options (if still possible) and replace them with the new ones. Use the AnswerOption API for granular question option modifications.
     */
    patch: operations['questions_partial_update']
    trace?: never
  }
  '/api/events/{event}/reviews/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List Reviews */
    get: operations['reviews_list']
    put?: never
    /** Create Review */
    post: operations['reviews_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/reviews/{id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show Review */
    get: operations['reviews_retrieve']
    /** Update Reviews */
    put: operations['reviews_update']
    post?: never
    /** Delete Reviews */
    delete: operations['reviews_destroy']
    options?: never
    head?: never
    /** Update Reviews (Partial Update) */
    patch: operations['reviews_partial_update']
    trace?: never
  }
  '/api/events/{event}/rooms/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List Rooms */
    get: operations['rooms_list']
    put?: never
    /** Create Rooms */
    post: operations['rooms_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/rooms/{id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show Rooms */
    get: operations['rooms_retrieve']
    /** Update Rooms */
    put: operations['rooms_update']
    post?: never
    /** Delete Rooms */
    delete: operations['rooms_destroy']
    options?: never
    head?: never
    /** Update Rooms (Partial Update) */
    patch: operations['rooms_partial_update']
    trace?: never
  }
  '/api/events/{event}/schedules/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List Schedules
     * @description This endpoint returns a list of schedules. As schedule data can get very complex when expanded, the list endpoint only contains metadata. Please refer to the detail endpoint documentation to see how to retrieve slots, submissions and speakers.
     */
    get: operations['schedules_list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/schedules/{id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show Schedule
     * @description In addition to the standard lookup by ID, you can also use the special /wip/ and /latest/ URL paths to access the unpublished and latest published schedules. To receive most schedule data, query the endpoint with ``?expand=room,slots.submission.speakers``.
     */
    get: operations['schedules_retrieve']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/schedules/{id}/exporters/{name}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Exporter Content
     * @description Retrieve the content of a specific schedule exporter by name.
     */
    get: operations['schedules_exporters_retrieve']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/schedules/by-version/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Redirect to a schedule by its version
     * @description This endpoint redirects to a specific schedule using its version name (e.g., '1.0', 'My Release') instead of its numeric ID.
     */
    get: operations['schedules_by_version_retrieve']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/schedules/release/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Release a new schedule version
     * @description Freezes the current Work-in-Progress (WIP) schedule, creating a new named version. This makes the WIP schedule available under the given version name and creates a new empty WIP schedule.
     */
    post: operations['schedules_release_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/slots/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List Talk Slots
     * @description This endpoint always returns a filtered list. If you don’t provide any filters of your own, it will be filtered to show only talk slots in the latest published schedule.
     */
    get: operations['slots_list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/slots/{id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show Talk Slot */
    get: operations['slots_retrieve']
    /**
     * Update Talk Slot
     * @description Only talk slots in the WIP schedule can be changed – once a schedule version is frozen, its talk slots can’t be modified anymore.
     */
    put: operations['slots_update']
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Update Talk Slot (Partial Update)
     * @description Only talk slots in the WIP schedule can be changed – once a schedule version is frozen, its talk slots can’t be modified anymore.
     */
    patch: operations['slots_partial_update']
    trace?: never
  }
  '/api/events/{event}/slots/{id}/ical/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Export Talk Slot as iCalendar file
     * @description Export a single talk slot as an iCalendar file.
     */
    get: operations['slots_ical_retrieve']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/speaker-information/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List Speaker Information */
    get: operations['speaker_information_list']
    put?: never
    /** Create Speaker Information */
    post: operations['speaker_information_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/speaker-information/{id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show Speaker Information */
    get: operations['speaker_information_retrieve']
    /** Update Speaker Information */
    put: operations['speaker_information_update']
    post?: never
    /** Delete Speaker Information */
    delete: operations['speaker_information_destroy']
    options?: never
    head?: never
    /** Update Speaker Information (Partial Update) */
    patch: operations['speaker_information_partial_update']
    trace?: never
  }
  '/api/events/{event}/speakers/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List Speakers */
    get: operations['speakers_list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/speakers/{user__code__iexact}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show Speaker */
    get: operations['speakers_retrieve']
    /** Update Speaker */
    put: operations['speakers_update']
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Update Speaker (Partial Update) */
    patch: operations['speakers_partial_update']
    trace?: never
  }
  '/api/events/{event}/submission-types/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List Submission Types */
    get: operations['submission_types_list']
    put?: never
    /** Create Submission Types */
    post: operations['submission_types_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/submission-types/{id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show Submission Types */
    get: operations['submission_types_retrieve']
    /** Update Submission Types */
    put: operations['submission_types_update']
    post?: never
    /** Delete Submission Types */
    delete: operations['submission_types_destroy']
    options?: never
    head?: never
    /** Update Submission Types (Partial Update) */
    patch: operations['submission_types_partial_update']
    trace?: never
  }
  '/api/events/{event}/submissions/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List Submissions */
    get: operations['submissions_list']
    put?: never
    /**
     * Create Submission
     * @description Note that a submission created via the API will start in the submitted state and without speakers. No notification emails will be sent, and the submission may be in an invalid state (e.g. if the event has required custom fields).
     */
    post: operations['submissions_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/submissions/{code__iexact}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show Submission */
    get: operations['submissions_retrieve']
    /** Update Submission */
    put: operations['submissions_update']
    post?: never
    /**
     * Delete Submission
     * @description This endpoint is only available to server administrators.
     */
    delete: operations['submissions_destroy']
    options?: never
    head?: never
    /** Update Submission (Partial Update) */
    patch: operations['submissions_partial_update']
    trace?: never
  }
  '/api/events/{event}/submissions/{code__iexact}/accept/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Accept Submission */
    post: operations['submissions_accept_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/submissions/{code__iexact}/add-speaker/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Add Speaker to Submission */
    post: operations['submissions_add_speaker_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/submissions/{code__iexact}/cancel/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Cancel Submission */
    post: operations['submissions_cancel_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/submissions/{code__iexact}/confirm/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Confirm Submission */
    post: operations['submissions_confirm_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/submissions/{code__iexact}/make-submitted/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Make Submission Submitted */
    post: operations['submissions_make_submitted_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/submissions/{code__iexact}/reject/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Reject Submission */
    post: operations['submissions_reject_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/submissions/{code__iexact}/remove-speaker/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Remove Speaker from Submission */
    post: operations['submissions_remove_speaker_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/submissions/{code}/favourite/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Add or remove a submission from favourites
     * @description This endpoint is used by the schedule widget and uses session authentication.
     */
    post: operations['submissions_favourite_create']
    /**
     * Add or remove a submission from favourites
     * @description This endpoint is used by the schedule widget and uses session authentication.
     */
    delete: operations['submissions_favourite_destroy']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/submissions/favourites/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List favourite submissions
     * @description This endpoint is used by the schedule widget and uses session authentication.
     */
    get: operations['submissions_favourites_retrieve']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/tags/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List tags */
    get: operations['tags_list']
    put?: never
    /** Create Tags */
    post: operations['tags_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/tags/{id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show Tags */
    get: operations['tags_retrieve']
    /** Update Tags */
    put: operations['tags_update']
    post?: never
    /** Delete Tags */
    delete: operations['tags_destroy']
    options?: never
    head?: never
    /** Update Tags (Partial Update) */
    patch: operations['tags_partial_update']
    trace?: never
  }
  '/api/events/{event}/tracks/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List Tracks */
    get: operations['tracks_list']
    put?: never
    /** Create Tracks */
    post: operations['tracks_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{event}/tracks/{id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show Tracks */
    get: operations['tracks_retrieve']
    /** Update Tracks */
    put: operations['tracks_update']
    post?: never
    /** Delete Tracks */
    delete: operations['tracks_destroy']
    options?: never
    head?: never
    /** Update Tracks (Partial Update) */
    patch: operations['tracks_partial_update']
    trace?: never
  }
  '/api/organisers/{organiser}/teams/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List Teams */
    get: operations['api_organisers_teams_list']
    put?: never
    /** Create Team */
    post: operations['api_organisers_teams_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/organisers/{organiser}/teams/{id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show Team */
    get: operations['api_organisers_teams_retrieve']
    /** Update Team */
    put: operations['api_organisers_teams_update']
    post?: never
    /** Delete Team */
    delete: operations['api_organisers_teams_destroy']
    options?: never
    head?: never
    /** Update Team (Partial Update) */
    patch: operations['api_organisers_teams_partial_update']
    trace?: never
  }
  '/api/organisers/{organiser}/teams/{id}/invite/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Invite Member to Team
     * @description Creates a team invite, and sends an invite.
     */
    post: operations['api_organisers_teams_invite_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/organisers/{organiser}/teams/{id}/invites/{invite_id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Delete Team Invite */
    delete: operations['api_organisers_teams_invites_destroy']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/organisers/{organiser}/teams/{id}/remove_member/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Remove Member from Team */
    post: operations['api_organisers_teams_remove_member_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/upload/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Upload a file (image or PDF) for temporary storage. Allowed file types: PNG, JPEG, GIF, SVG, PDF. */
    post: operations['File upload']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    'AddSpeakerRequest': {
      /** Format: email */
      email: string
      name?: string | null
      locale?: string | null
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'Answer': {
      readonly id: number
      readonly question: number
      answer: string
      /** @description When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>. */
      answer_file?: Record<string, never>
      readonly submission: string
      readonly review: number
      readonly person: string | null
      options: number[]
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'AnswerCreate': {
      readonly id: number
      question: number
      answer: string
      /** @description When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>. */
      answer_file?: Record<string, never>
      submission?: string | null
      review?: number | null
      person?: string | null
      options?: number[]
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'AnswerCreateRequest': {
      question: number
      answer: string
      /** @description When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>. */
      answer_file?: Record<string, never>
      submission?: string | null
      review?: number | null
      person?: string | null
      options?: number[]
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'AnswerOption': {
      readonly id: number
      readonly question: number
      /** Response */
      answer: components['schemas']['Multi-language string']
      position?: number
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'AnswerOptionCreate': {
      readonly id: number
      question: number
      /** Response */
      answer: components['schemas']['Multi-language string']
      position?: number
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'AnswerOptionCreateRequest': {
      question: number
      /** Response */
      answer: components['schemas']['Multi-language string']
      position?: number
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'AnswerOptionRequest': {
      /** Response */
      answer: components['schemas']['Multi-language string']
      position?: number
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'AnswerRequest': {
      answer: string
      /** @description When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>. */
      answer_file?: Record<string, never>
      options: number[]
    }
    'Availability': {
      /** Format: date-time */
      start: string
      /** Format: date-time */
      end: string
      /** @description Computed field indicating if an availability fills an entire day. */
      readonly allDay: boolean
    }
    'AvailabilityRequest': {
      /** Format: date-time */
      start: string
      /** Format: date-time */
      end: string
    }
    /** @enum {unknown} */
    'BlankEnum': ''
    'Event': {
      name: components['schemas']['Multi-language string']
      /**
       * Short form
       * @description The slug may only contain letters, numbers, dots and dashes.
       */
      slug: string
      /** Event is public */
      is_public?: boolean
      /**
       * Event start date
       * Format: date
       */
      date_from: string
      /**
       * Event end date
       * Format: date
       */
      date_to: string
      /**
       * @description All event dates will be localised and interpreted to be in this timezone.
       *
       */
      timezone?: components['schemas']['TimezoneEnum']
      /**
       * Organiser email address
       * Format: email
       * @description Will be used as Reply-To in emails.
       */
      email: string
      /**
       * Main event colour
       * @description Provide a hex value like #00ff00 if you want to style pretalx in your event’s colour scheme.
       */
      primary_color?: string | null
      /**
       * Format: uri
       * @description Enter a custom domain, such as https://my.event.example.org
       */
      custom_domain?: string | null
      /** @description When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>. */
      logo?: Record<string, never>
      /**
       * Format: uri
       * @description If you provide a header image, it will be displayed instead of your event’s color and/or header pattern at the top of all event pages. It will be center-aligned, so when the window shrinks, the center parts will continue to be displayed, and not stretched.
       */
      header_image?: string | null
      /** Default language */
      locale?: components['schemas']['LocaleEnum']
      /** @description Is a list of active event locales. */
      readonly locales: string[]
      /** @description Is a list of active content locales. */
      readonly content_locales: string[]
    }
    'EventList': {
      name: components['schemas']['Multi-language string']
      /**
       * Short form
       * @description The slug may only contain letters, numbers, dots and dashes.
       */
      slug: string
      /** Event is public */
      is_public?: boolean
      /**
       * Event start date
       * Format: date
       */
      date_from: string
      /**
       * Event end date
       * Format: date
       */
      date_to: string
      /**
       * @description All event dates will be localised and interpreted to be in this timezone.
       *
       */
      timezone?: components['schemas']['TimezoneEnum']
    }
    /** @description Serializer for file upload response. */
    'FileResponse': {
      /** @description Cached file identifier */
      id: string
    }
    /**
     * @description * `en` - English
     *     `de` - German
     *     `de-formal` - German (formal)
     *     `ar` - Arabic
     *     `cs` - Czech
     *     `el` - Greek
     *     `es` - Spanish
     *     `fr` - French
     *     `it` - Italian
     *     `ja-jp` - Japanese
     *     `nl` - Dutch
     *     `pl` - Polish
     *     `pt-br` - Brasilian Portuguese
     *     `pt-pt` - Portuguese
     *     `vi` - Vietnamese
     *     `zh-hant` - Traditional Chinese (Taiwan)
     *     `zh-hans` - Simplified Chinese
     * @enum {string}
     */
    'LocaleEnum': 'en' | 'de' | 'de-formal' | 'ar' | 'cs' | 'el' | 'es' | 'fr' | 'it' | 'ja-jp' | 'nl' | 'pl' | 'pt-br' | 'pt-pt' | 'vi' | 'zh-hant' | 'zh-hans'
    /**
     * @description This serializer class will behave like the i18nfield serializer,
     *     outputting a dict/object for internationalized strings, unless if
     *     when it was initialized with an ``override_locale`` (taken from
     *     a URL queryparam, usually), in which case the string will be cast
     *     to the locale in question – relying on either a view or a middleware
     *     to apply the locale manager.
     */
    'MailTemplate': {
      readonly id: number
      role: components['schemas']['RoleEnum']
      subject: components['schemas']['Multi-language string']
      text: components['schemas']['Multi-language string']
      /** @description Change the Reply-To address if you do not want to use the default organiser address */
      reply_to?: string | null
      /** @description Enter comma separated addresses. Will receive a blind copy of every mail sent from this template. This may be a LOT! */
      bcc?: string | null
    }
    /**
     * @description This serializer class will behave like the i18nfield serializer,
     *     outputting a dict/object for internationalized strings, unless if
     *     when it was initialized with an ``override_locale`` (taken from
     *     a URL queryparam, usually), in which case the string will be cast
     *     to the locale in question – relying on either a view or a middleware
     *     to apply the locale manager.
     */
    'MailTemplateRequest': {
      subject: components['schemas']['Multi-language string']
      text: components['schemas']['Multi-language string']
      /** @description Change the Reply-To address if you do not want to use the default organiser address */
      reply_to?: string | null
      /** @description Enter comma separated addresses. Will receive a blind copy of every mail sent from this template. This may be a LOT! */
      bcc?: string | null
    }
    /**
     * @example {
     *       "en": "English text",
     *       "de": "Deutscher Text"
     *     }
     */
    'Multi-language string': {
      [key: string]: string
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'NestedAnswerOption': {
      readonly id: number
      /** Response */
      answer: components['schemas']['Multi-language string']
      position?: number
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'NestedAnswerOptionRequest': {
      /** Response */
      answer: components['schemas']['Multi-language string']
      position?: number
    }
    /** @enum {unknown} */
    'NullEnum': null
    'PaginatedAnswerList': {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components['schemas']['Answer'][]
    }
    'PaginatedAnswerOptionList': {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components['schemas']['AnswerOption'][]
    }
    'PaginatedMailTemplateList': {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components['schemas']['MailTemplate'][]
    }
    'PaginatedQuestionList': {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components['schemas']['Question'][]
    }
    'PaginatedReviewList': {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components['schemas']['Review'][]
    }
    'PaginatedRoomList': {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null
      results: components['schemas']['Room'][]
    }
    'PaginatedScheduleListList': {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components['schemas']['ScheduleList'][]
    }
    'PaginatedSpeakerInformationList': {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components['schemas']['SpeakerInformation'][]
    }
    'PaginatedSpeakerList': {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components['schemas']['Speaker'][]
    }
    'PaginatedSubmissionList': {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components['schemas']['Submission'][]
    }
    'PaginatedSubmissionTypeList': {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components['schemas']['SubmissionType'][]
    }
    'PaginatedSubmitterAccessCodeList': {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components['schemas']['SubmitterAccessCode'][]
    }
    'PaginatedTagList': {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components['schemas']['Tag'][]
    }
    'PaginatedTalkSlotList': {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components['schemas']['TalkSlot'][]
    }
    'PaginatedTeamList': {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components['schemas']['Team'][]
    }
    'PaginatedTrackList': {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components['schemas']['Track'][]
    }
    /**
     * @description * `submitted` - submitted
     *     `accepted` - accepted
     *     `confirmed` - confirmed
     *     `rejected` - rejected
     *     `canceled` - canceled
     *     `withdrawn` - withdrawn
     *     `deleted` - deleted
     *     `draft` - draft
     * @enum {string}
     */
    'PendingStateEnum': 'submitted' | 'accepted' | 'confirmed' | 'rejected' | 'canceled' | 'withdrawn' | 'deleted' | 'draft'
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'Question': {
      readonly id: number
      /** Label */
      question: components['schemas']['Multi-language string']
      /** @description Will appear just like this text below the custom input field. You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here. */
      help_text?: components['schemas']['Multi-language string'] | null
      default_answer?: string | null
      variant?: components['schemas']['VariantEnum']
      /**
       * Field type
       * @description Do you require an answer from every speaker or for every session?
       *
       *     `submission` - per proposal
       *     `speaker` - per speaker
       *     `reviewer` - for reviewers
       */
      target?: components['schemas']['TargetEnum']
      /**
       * Format: date-time
       * @description Set a deadline to make this field required after the given date.
       */
      deadline?: string | null
      /**
       * Format: date-time
       * @description Set a deadline to stop changes to responses after the given date.
       */
      freeze_after?: string | null
      /** Field required */
      question_required?: components['schemas']['QuestionRequiredEnum']
      position?: number
      /** @description You can limit this field to some tracks. Leave empty to apply to all tracks. */
      tracks?: number[]
      /**
       * Session Types
       * @description You can limit this field to some session types. Leave empty to apply to all session types.
       */
      submission_types?: number[]
      options: number[]
      /**
       * Minimum text length
       * @description Minimum allowed text in characters or words (set in CfP settings).
       */
      min_length?: number | null
      /**
       * Maximum text length
       * @description Maximum allowed text length in characters or words (set in CfP settings).
       */
      max_length?: number | null
      /**
       * Minimum value
       * Format: decimal
       */
      min_number?: string | null
      /**
       * Maximum value
       * Format: decimal
       */
      max_number?: string | null
      /**
       * Minimum value
       * Format: date
       */
      min_date?: string | null
      /**
       * Maximum value
       * Format: date
       */
      max_date?: string | null
      /**
       * Minimum value
       * Format: date-time
       */
      min_datetime?: string | null
      /**
       * Maximum value
       * Format: date-time
       */
      max_datetime?: string | null
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'QuestionOrga': {
      readonly id: number
      /** Label */
      question: components['schemas']['Multi-language string']
      /** @description Will appear just like this text below the custom input field. You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here. */
      help_text?: components['schemas']['Multi-language string'] | null
      default_answer?: string | null
      variant?: components['schemas']['VariantEnum']
      /**
       * Field type
       * @description Do you require an answer from every speaker or for every session?
       *
       *     `submission` - per proposal
       *     `speaker` - per speaker
       *     `reviewer` - for reviewers
       */
      target?: components['schemas']['TargetEnum']
      /**
       * Format: date-time
       * @description Set a deadline to make this field required after the given date.
       */
      deadline?: string | null
      /**
       * Format: date-time
       * @description Set a deadline to stop changes to responses after the given date.
       */
      freeze_after?: string | null
      /** Field required */
      question_required?: components['schemas']['QuestionRequiredEnum']
      position?: number
      /** @description You can limit this field to some tracks. Leave empty to apply to all tracks. */
      tracks?: number[]
      /**
       * Session Types
       * @description You can limit this field to some session types. Leave empty to apply to all session types.
       */
      submission_types?: number[]
      options?: components['schemas']['NestedAnswerOption'][]
      /**
       * Minimum text length
       * @description Minimum allowed text in characters or words (set in CfP settings).
       */
      min_length?: number | null
      /**
       * Maximum text length
       * @description Maximum allowed text length in characters or words (set in CfP settings).
       */
      max_length?: number | null
      /**
       * Minimum value
       * Format: decimal
       */
      min_number?: string | null
      /**
       * Maximum value
       * Format: decimal
       */
      max_number?: string | null
      /**
       * Minimum value
       * Format: date
       */
      min_date?: string | null
      /**
       * Maximum value
       * Format: date
       */
      max_date?: string | null
      /**
       * Minimum value
       * Format: date-time
       */
      min_datetime?: string | null
      /**
       * Maximum value
       * Format: date-time
       */
      max_datetime?: string | null
      /** @description Inactive fields will no longer be shown. */
      active?: boolean
      /**
       * Publish answers
       * @description Responses will be shown on session or speaker pages as appropriate. Please note that you cannot make a field public after the first answers have been given, to allow speakers explicit consent before publishing information.
       */
      is_public?: boolean
      /**
       * Responses contain personal data
       * @description If a user deletes their account, responses containing personal data will be removed, too.
       */
      contains_personal_data?: boolean
      /**
       * Show answers to reviewers
       * @description Should responses to this field be shown to reviewers? This is helpful if you want to collect personal information, but use anonymous reviews.
       */
      is_visible_to_reviewers?: boolean
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'QuestionOrgaRequest': {
      /** Label */
      question: components['schemas']['Multi-language string']
      /** @description Will appear just like this text below the custom input field. You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here. */
      help_text?: components['schemas']['Multi-language string'] | null
      default_answer?: string | null
      variant?: components['schemas']['VariantEnum']
      /**
       * Field type
       * @description Do you require an answer from every speaker or for every session?
       *
       *     `submission` - per proposal
       *     `speaker` - per speaker
       *     `reviewer` - for reviewers
       */
      target?: components['schemas']['TargetEnum']
      /**
       * Format: date-time
       * @description Set a deadline to make this field required after the given date.
       */
      deadline?: string | null
      /**
       * Format: date-time
       * @description Set a deadline to stop changes to responses after the given date.
       */
      freeze_after?: string | null
      /** Field required */
      question_required?: components['schemas']['QuestionRequiredEnum']
      position?: number
      /** @description You can limit this field to some tracks. Leave empty to apply to all tracks. */
      tracks?: number[]
      /**
       * Session Types
       * @description You can limit this field to some session types. Leave empty to apply to all session types.
       */
      submission_types?: number[]
      options?: components['schemas']['NestedAnswerOptionRequest'][]
      /**
       * Minimum text length
       * @description Minimum allowed text in characters or words (set in CfP settings).
       */
      min_length?: number | null
      /**
       * Maximum text length
       * @description Maximum allowed text length in characters or words (set in CfP settings).
       */
      max_length?: number | null
      /**
       * Minimum value
       * Format: decimal
       */
      min_number?: string | null
      /**
       * Maximum value
       * Format: decimal
       */
      max_number?: string | null
      /**
       * Minimum value
       * Format: date
       */
      min_date?: string | null
      /**
       * Maximum value
       * Format: date
       */
      max_date?: string | null
      /**
       * Minimum value
       * Format: date-time
       */
      min_datetime?: string | null
      /**
       * Maximum value
       * Format: date-time
       */
      max_datetime?: string | null
      /** @description Inactive fields will no longer be shown. */
      active?: boolean
      /**
       * Publish answers
       * @description Responses will be shown on session or speaker pages as appropriate. Please note that you cannot make a field public after the first answers have been given, to allow speakers explicit consent before publishing information.
       */
      is_public?: boolean
      /**
       * Responses contain personal data
       * @description If a user deletes their account, responses containing personal data will be removed, too.
       */
      contains_personal_data?: boolean
      /**
       * Show answers to reviewers
       * @description Should responses to this field be shown to reviewers? This is helpful if you want to collect personal information, but use anonymous reviews.
       */
      is_visible_to_reviewers?: boolean
    }
    /**
     * @description * `optional` - always optional
     *     `required` - always required
     *     `after_deadline` - required after a deadline
     * @enum {string}
     */
    'QuestionRequiredEnum': 'optional' | 'required' | 'after_deadline'
    'RemoveSpeakerRequest': {
      user: string
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'Review': {
      readonly id: number
      submission: string
      /** What do you think? */
      text?: string | null
      /** Format: decimal */
      readonly score: string | null
      scores: components['schemas']['ReviewScore'][]
      readonly answers: components['schemas']['Answer'][]
      readonly user: string | null
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'ReviewScore': {
      readonly id: number
      category: number
      /** Format: decimal */
      value: string
      label?: string | null
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'ReviewWriteRequest': {
      submission: string
      /** What do you think? */
      text?: string | null
      scores: number[]
      answers?: number[]
    }
    /**
     * @description This serializer class will behave like the i18nfield serializer,
     *     outputting a dict/object for internationalized strings, unless if
     *     when it was initialized with an ``override_locale`` (taken from
     *     a URL queryparam, usually), in which case the string will be cast
     *     to the locale in question – relying on either a view or a middleware
     *     to apply the locale manager.
     */
    'Room': {
      readonly id: number
      name: components['schemas']['Multi-language string']
      /** @description A description for attendees, for example directions. */
      description?: components['schemas']['Multi-language string'] | null
      /**
       * Format: uuid
       * @description The uuid field is equal the the guid field if a guid has been set. Otherwise, it will contain a computed (stable) UUID.
       */
      readonly uuid: string
      /**
       * Format: uuid
       * @description Unique identifier (UUID) to help external tools identify the room.
       */
      guid?: string | null
      /** @description How many people can fit in the room? */
      capacity?: number | null
      position?: number | null
    }
    /**
     * @description This serializer class will behave like the i18nfield serializer,
     *     outputting a dict/object for internationalized strings, unless if
     *     when it was initialized with an ``override_locale`` (taken from
     *     a URL queryparam, usually), in which case the string will be cast
     *     to the locale in question – relying on either a view or a middleware
     *     to apply the locale manager.
     */
    'RoomOrga': {
      readonly id: number
      name: components['schemas']['Multi-language string']
      /** @description A description for attendees, for example directions. */
      description?: components['schemas']['Multi-language string'] | null
      /**
       * Format: uuid
       * @description The uuid field is equal the the guid field if a guid has been set. Otherwise, it will contain a computed (stable) UUID.
       */
      readonly uuid: string
      /**
       * Format: uuid
       * @description Unique identifier (UUID) to help external tools identify the room.
       */
      guid?: string | null
      /** @description How many people can fit in the room? */
      capacity?: number | null
      position?: number | null
      /**
       * Speaker Information
       * @description Information relevant for speakers scheduled in this room, for example room size, special directions, available adaptors for video input …
       */
      speaker_info?: components['schemas']['Multi-language string'] | null
      availabilities?: components['schemas']['Availability'][]
    }
    /**
     * @description This serializer class will behave like the i18nfield serializer,
     *     outputting a dict/object for internationalized strings, unless if
     *     when it was initialized with an ``override_locale`` (taken from
     *     a URL queryparam, usually), in which case the string will be cast
     *     to the locale in question – relying on either a view or a middleware
     *     to apply the locale manager.
     */
    'RoomOrgaRequest': {
      name: components['schemas']['Multi-language string']
      /** @description A description for attendees, for example directions. */
      description?: components['schemas']['Multi-language string'] | null
      /**
       * Format: uuid
       * @description Unique identifier (UUID) to help external tools identify the room.
       */
      guid?: string | null
      /** @description How many people can fit in the room? */
      capacity?: number | null
      position?: number | null
      /**
       * Speaker Information
       * @description Information relevant for speakers scheduled in this room, for example room size, special directions, available adaptors for video input …
       */
      speaker_info?: components['schemas']['Multi-language string'] | null
      availabilities?: components['schemas']['AvailabilityRequest'][]
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'Schedule': {
      readonly id: number
      version: string
      /** Format: date-time */
      published?: string | null
      /** @description This text will be shown in the public changelog and the RSS feed. You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here. */
      comment?: components['schemas']['Multi-language string'] | null
      readonly slots: number[]
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'ScheduleList': {
      readonly id: number
      version: string
      /** Format: date-time */
      published?: string | null
    }
    /**
     * @description This serializer class will behave like the i18nfield serializer,
     *     outputting a dict/object for internationalized strings, unless if
     *     when it was initialized with an ``override_locale`` (taken from
     *     a URL queryparam, usually), in which case the string will be cast
     *     to the locale in question – relying on either a view or a middleware
     *     to apply the locale manager.
     */
    'ScheduleReleaseRequest': {
      version: string
      comment?: string | null
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'Speaker': {
      readonly code: string
      name: string
      /** @description You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here. */
      biography?: string | null
      readonly submissions: string[]
      /** Format: uri */
      readonly avatar_url: string
      readonly answers: number[]
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'SpeakerInformation': {
      readonly id: number
      target_group?: components['schemas']['TargetGroupEnum']
      /** Subject */
      title: components['schemas']['Multi-language string']
      /** @description You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here. */
      text: components['schemas']['Multi-language string']
      /** @description When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>. */
      resource?: Record<string, never>
      /**
       * Limit to tracks
       * @description Leave empty to show this information to all tracks.
       */
      limit_tracks?: number[]
      /**
       * Limit to proposal types
       * @description Leave empty to show this information for all proposal types.
       */
      limit_types?: number[]
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'SpeakerInformationRequest': {
      target_group?: components['schemas']['TargetGroupEnum']
      /** Subject */
      title: components['schemas']['Multi-language string']
      /** @description You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here. */
      text: components['schemas']['Multi-language string']
      /** @description When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>. */
      resource?: Record<string, never>
      /**
       * Limit to tracks
       * @description Leave empty to show this information to all tracks.
       */
      limit_tracks?: number[]
      /**
       * Limit to proposal types
       * @description Leave empty to show this information for all proposal types.
       */
      limit_types?: number[]
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'SpeakerOrga': {
      readonly code: string
      name: string
      /** @description You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here. */
      biography?: string | null
      readonly submissions: string[]
      /** Format: uri */
      readonly avatar_url: string
      readonly answers: number[]
      /** Format: email */
      email: string
      readonly timezone: string
      readonly locale: string
      /** The speaker has arrived */
      has_arrived?: boolean
      availabilities?: components['schemas']['Availability'][]
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'SpeakerUpdateRequest': {
      name: string
      /** @description You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here. */
      biography?: string | null
      /** Format: email */
      email: string
      /** The speaker has arrived */
      has_arrived?: boolean
      availabilities?: components['schemas']['AvailabilityRequest'][]
      /** @description When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>. */
      avatar?: Record<string, never>
    }
    /**
     * @description * `submitted` - submitted
     *     `accepted` - accepted
     *     `confirmed` - confirmed
     *     `rejected` - rejected
     *     `canceled` - canceled
     *     `withdrawn` - withdrawn
     *     `deleted` - deleted
     *     `draft` - draft
     * @enum {string}
     */
    'StateEnum': 'submitted' | 'accepted' | 'confirmed' | 'rejected' | 'canceled' | 'withdrawn' | 'deleted' | 'draft'
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'Submission': {
      readonly code: string
      /** Proposal title */
      title: string
      readonly speakers: string[]
      submission_type: number
      track?: number | null
      tags?: number[]
      /** Proposal state */
      readonly state: components['schemas']['StateEnum']
      /** @description You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here. */
      abstract?: string | null
      /** @description You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here. */
      description?: string | null
      /** @description Defaults to the submission type’s duration */
      duration?: number
      /** @description How many times this session will take place. */
      slot_count?: number
      /** Language */
      content_locale?: string
      /** Don’t record this session. */
      do_not_record?: boolean
      /** @description When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>. */
      image?: Record<string, never>
      readonly resources: number[]
      readonly slots: number[]
      readonly answers: number[]
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'SubmissionOrga': {
      readonly code: string
      /** Proposal title */
      title: string
      readonly speakers: string[]
      submission_type: number
      track?: number | null
      tags?: number[]
      /** Proposal state */
      readonly state: components['schemas']['StateEnum']
      /** @description You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here. */
      abstract?: string | null
      /** @description You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here. */
      description?: string | null
      /** @description Defaults to the submission type’s duration */
      duration?: number
      /** @description How many times this session will take place. */
      slot_count?: number
      /** Language */
      content_locale?: string
      /** Don’t record this session. */
      do_not_record?: boolean
      /** @description When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>. */
      image?: Record<string, never>
      readonly resources: number[]
      readonly slots: number[]
      readonly answers: number[]
      /** Pending proposal state */
      pending_state?: (components['schemas']['PendingStateEnum'] | components['schemas']['BlankEnum'] | components['schemas']['NullEnum']) | null
      /** Show this session in public list of featured sessions. */
      is_featured?: boolean
      /** @description These notes are meant for the organiser and won’t be made public. */
      notes?: string | null
      /** @description Internal notes for other organisers/reviewers. Not visible to the speakers or the public. */
      internal_notes?: string | null
      invitation_token?: string
      access_code?: number | null
      review_code?: string | null
      anonymised_data?: string | null
      reviews?: number[]
      assigned_reviewers?: (string | null)[]
      readonly is_anonymised: boolean
      /** Format: double */
      readonly median_score: number | null
      /** Format: double */
      readonly mean_score: number | null
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'SubmissionOrgaRequest': {
      /** Proposal title */
      title: string
      submission_type: number
      track?: number | null
      tags?: number[]
      /** @description You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here. */
      abstract?: string | null
      /** @description You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here. */
      description?: string | null
      /** @description Defaults to the submission type’s duration */
      duration?: number
      /** @description How many times this session will take place. */
      slot_count?: number
      /** Language */
      content_locale?: string
      /** Don’t record this session. */
      do_not_record?: boolean
      /** @description When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>. */
      image?: Record<string, never>
      /** Pending proposal state */
      pending_state?: (components['schemas']['PendingStateEnum'] | components['schemas']['BlankEnum'] | components['schemas']['NullEnum']) | null
      /** Show this session in public list of featured sessions. */
      is_featured?: boolean
      /** @description These notes are meant for the organiser and won’t be made public. */
      notes?: string | null
      /** @description Internal notes for other organisers/reviewers. Not visible to the speakers or the public. */
      internal_notes?: string | null
      invitation_token?: string
      access_code?: number | null
      review_code?: string | null
      anonymised_data?: string | null
      reviews?: number[]
      assigned_reviewers?: (string | null)[]
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'SubmissionRequest': {
      /** Proposal title */
      title: string
      submission_type: number
      track?: number | null
      tags?: number[]
      /** @description You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here. */
      abstract?: string | null
      /** @description You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here. */
      description?: string | null
      /** @description Defaults to the submission type’s duration */
      duration?: number
      /** @description How many times this session will take place. */
      slot_count?: number
      /** Language */
      content_locale?: string
      /** Don’t record this session. */
      do_not_record?: boolean
      /** @description When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>. */
      image?: Record<string, never>
    }
    /**
     * @description This serializer class will behave like the i18nfield serializer,
     *     outputting a dict/object for internationalized strings, unless if
     *     when it was initialized with an ``override_locale`` (taken from
     *     a URL queryparam, usually), in which case the string will be cast
     *     to the locale in question – relying on either a view or a middleware
     *     to apply the locale manager.
     */
    'SubmissionType': {
      readonly id: number
      name: components['schemas']['Multi-language string']
      /** @description Default duration in minutes */
      default_duration?: number
      /**
       * Format: date-time
       * @description If you want a different deadline than the global deadline for this session type, enter it here.
       */
      deadline?: string | null
      /** @description This session type will only be shown to submitters with a matching access code. */
      requires_access_code?: boolean
    }
    /**
     * @description This serializer class will behave like the i18nfield serializer,
     *     outputting a dict/object for internationalized strings, unless if
     *     when it was initialized with an ``override_locale`` (taken from
     *     a URL queryparam, usually), in which case the string will be cast
     *     to the locale in question – relying on either a view or a middleware
     *     to apply the locale manager.
     */
    'SubmissionTypeRequest': {
      name: components['schemas']['Multi-language string']
      /** @description Default duration in minutes */
      default_duration?: number
      /**
       * Format: date-time
       * @description If you want a different deadline than the global deadline for this session type, enter it here.
       */
      deadline?: string | null
      /** @description This session type will only be shown to submitters with a matching access code. */
      requires_access_code?: boolean
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'SubmitterAccessCode': {
      readonly id: number
      /** Access code */
      code: string
      /** @description You can restrict the access code to a single track, or leave it open for all tracks. */
      track?: number | null
      /**
       * Session Type
       * @description You can restrict the access code to a single session type, or leave it open for all session types.
       */
      submission_type?: number | null
      /**
       * Format: date-time
       * @description You can set or change this date later to invalidate the access code.
       */
      valid_until?: string | null
      /** @description Numbers of times this access code can be used to submit a proposal. Leave empty for no limit. */
      maximum_uses?: number | null
      readonly redeemed: number
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'SubmitterAccessCodeRequest': {
      /** Access code */
      code: string
      /** @description You can restrict the access code to a single track, or leave it open for all tracks. */
      track?: number | null
      /**
       * Session Type
       * @description You can restrict the access code to a single session type, or leave it open for all session types.
       */
      submission_type?: number | null
      /**
       * Format: date-time
       * @description You can set or change this date later to invalidate the access code.
       */
      valid_until?: string | null
      /** @description Numbers of times this access code can be used to submit a proposal. Leave empty for no limit. */
      maximum_uses?: number | null
    }
    /**
     * @description This serializer class will behave like the i18nfield serializer,
     *     outputting a dict/object for internationalized strings, unless if
     *     when it was initialized with an ``override_locale`` (taken from
     *     a URL queryparam, usually), in which case the string will be cast
     *     to the locale in question – relying on either a view or a middleware
     *     to apply the locale manager.
     */
    'Tag': {
      readonly id: number
      tag: string
      description?: components['schemas']['Multi-language string']
      color: string
      /**
       * Show tag publicly
       * @description Tags are currently only in use for organisers and reviewers. They will be visible publicly in a future release of pretalx.
       */
      is_public?: boolean
    }
    /**
     * @description This serializer class will behave like the i18nfield serializer,
     *     outputting a dict/object for internationalized strings, unless if
     *     when it was initialized with an ``override_locale`` (taken from
     *     a URL queryparam, usually), in which case the string will be cast
     *     to the locale in question – relying on either a view or a middleware
     *     to apply the locale manager.
     */
    'TagRequest': {
      tag: string
      description?: components['schemas']['Multi-language string']
      color: string
      /**
       * Show tag publicly
       * @description Tags are currently only in use for organisers and reviewers. They will be visible publicly in a future release of pretalx.
       */
      is_public?: boolean
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'TalkSlot': {
      readonly id: number
      /** @description The room this talk is scheduled in, if any */
      room?: number | null
      /**
       * Format: date-time
       * @description When the talk starts, if it is currently scheduled
       */
      start?: string | null
      /** Format: date-time */
      end: string
      readonly submission: string
      readonly schedule: number
      description?: components['schemas']['Multi-language string'] | null
      /**
       * @description Returns the actual duration in minutes if the talk is scheduled, and
       *     the planned duration in minutes otherwise.
       */
      readonly duration: number
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'TalkSlotRequest': {
      /** @description The room this talk is scheduled in, if any */
      room?: number | null
      /**
       * Format: date-time
       * @description When the talk starts, if it is currently scheduled
       */
      start?: string | null
      /** Format: date-time */
      end: string
      description?: components['schemas']['Multi-language string'] | null
    }
    /**
     * @description * `submission` - per proposal
     *     `speaker` - per speaker
     *     `reviewer` - for reviewers
     * @enum {string}
     */
    'TargetEnum': 'submission' | 'speaker' | 'reviewer'
    /**
     * @description * `submitters` - all
     *     `accepted` - All accepted speakers
     *     `confirmed` - Only confirmed speakers
     * @enum {string}
     */
    'TargetGroupEnum': 'submitters' | 'accepted' | 'confirmed'
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'Team': {
      readonly id: number
      /** Team name */
      name: string
      members?: (string | null)[]
      invites?: number[]
      /** Apply permissions to all events by this organiser (including newly created ones) */
      all_events?: boolean
      limit_events?: string[]
      limit_tracks?: number[]
      can_create_events?: boolean
      /** Can change teams and permissions */
      can_change_teams?: boolean
      can_change_organiser_settings?: boolean
      can_change_event_settings?: boolean
      /** Can work with and change proposals */
      can_change_submissions?: boolean
      /** Is a reviewer */
      is_reviewer?: boolean
      /**
       * Always hide speaker names
       * @description Normally, anonymisation is configured in the event review settings. This setting will <strong>override the event settings</strong> and always hide speaker names for this team.
       */
      force_hide_speaker_names?: boolean
    }
    'TeamInviteCreateRequest': {
      /** Format: email */
      email: string
    }
    'TeamMemberRemoveRequest': {
      user_code: string
    }
    /**
     * @description A ModelSerializer that takes additional arguments for
     *     "fields", "omit" and "expand" in order to
     *     control which fields are displayed, and whether to replace simple
     *     values with complex, nested serializations
     */
    'TeamRequest': {
      /** Team name */
      name: string
      members?: (string | null)[]
      invites?: number[]
      /** Apply permissions to all events by this organiser (including newly created ones) */
      all_events?: boolean
      limit_events?: string[]
      limit_tracks?: number[]
      can_create_events?: boolean
      /** Can change teams and permissions */
      can_change_teams?: boolean
      can_change_organiser_settings?: boolean
      can_change_event_settings?: boolean
      /** Can work with and change proposals */
      can_change_submissions?: boolean
      /** Is a reviewer */
      is_reviewer?: boolean
      /**
       * Always hide speaker names
       * @description Normally, anonymisation is configured in the event review settings. This setting will <strong>override the event settings</strong> and always hide speaker names for this team.
       */
      force_hide_speaker_names?: boolean
    }
    /** @enum {unknown} */
    'TimezoneEnum': never
    /**
     * @description This serializer class will behave like the i18nfield serializer,
     *     outputting a dict/object for internationalized strings, unless if
     *     when it was initialized with an ``override_locale`` (taken from
     *     a URL queryparam, usually), in which case the string will be cast
     *     to the locale in question – relying on either a view or a middleware
     *     to apply the locale manager.
     */
    'Track': {
      readonly id: number
      name: components['schemas']['Multi-language string']
      description?: components['schemas']['Multi-language string']
      color: string
      /** @description The position field is used to determine the order that tracks are displayed in (lowest first). */
      position?: number | null
      /** @description This track will only be shown to submitters with a matching access code. */
      requires_access_code?: boolean
    }
    /**
     * @description This serializer class will behave like the i18nfield serializer,
     *     outputting a dict/object for internationalized strings, unless if
     *     when it was initialized with an ``override_locale`` (taken from
     *     a URL queryparam, usually), in which case the string will be cast
     *     to the locale in question – relying on either a view or a middleware
     *     to apply the locale manager.
     */
    'TrackRequest': {
      name: components['schemas']['Multi-language string']
      description?: components['schemas']['Multi-language string']
      color: string
      /** @description The position field is used to determine the order that tracks are displayed in (lowest first). */
      position?: number | null
      /** @description This track will only be shown to submitters with a matching access code. */
      requires_access_code?: boolean
    }
    /**
     * @description * `number` - Number
     *     `string` - Text (one-line)
     *     `text` - Multi-line text
     *     `url` - URL
     *     `date` - Date
     *     `datetime` - Date and time
     *     `boolean` - Yes/No
     *     `file` - File upload
     *     `choices` - Choose one from a list
     *     `multiple_choice` - Choose multiple from a list
     * @enum {string}
     */
    'VariantEnum': 'number' | 'string' | 'text' | 'url' | 'date' | 'datetime' | 'boolean' | 'file' | 'choices' | 'multiple_choice'
    /**
     * @description * `submission.new` - Acknowledge proposal submission
     *     `submission.new.internal` - New proposal (organiser notification)
     *     `submission.state.accepted` - Proposal accepted
     *     `submission.state.rejected` - Proposal rejected
     *     `speaker.invite` - Add a speaker to a proposal (new account)
     *     `speaker.invite.existing` - Add a speaker to a proposal (existing account)
     *     `question.reminder` - Custom fields reminder
     *     `schedule.new` - New schedule published
     * @enum {string}
     */
    'RoleEnum': 'submission.new' | 'submission.new.internal' | 'submission.state.accepted' | 'submission.state.rejected' | 'speaker.invite' | 'speaker.invite.existing' | 'question.reminder' | 'schedule.new'
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  'api_events_list': {
    parameters: {
      query?: {
        is_public?: boolean
        /** @description A search term, searching in `"name"`. */
        q?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EventList'][]
        }
      }
    }
  }
  'root_retrieve': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Event']
        }
      }
    }
  }
  'access_codes_list': {
    parameters: {
      query?: {
        /** @description Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>. */
        expand?: ('submission_type' | 'track')[]
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description A search term, searching in `"code"`. */
        q?: string
      }
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedSubmitterAccessCodeList']
        }
      }
    }
  }
  'access_codes_create': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SubmitterAccessCodeRequest']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SubmitterAccessCode']
        }
      }
    }
  }
  'access_codes_retrieve': {
    parameters: {
      query?: {
        /** @description Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>. */
        expand?: ('submission_type' | 'track')[]
      }
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this submitter access code. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SubmitterAccessCode']
        }
      }
    }
  }
  'access_codes_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this submitter access code. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SubmitterAccessCodeRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SubmitterAccessCode']
        }
      }
    }
  }
  'access_codes_destroy': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this submitter access code. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'access_codes_partial_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this submitter access code. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SubmitterAccessCodeRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SubmitterAccessCode']
        }
      }
    }
  }
  'answers_list': {
    parameters: {
      query?: {
        /** @description Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>. */
        expand?: ('options' | 'question' | 'question.submission_types' | 'question.tracks')[]
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        person?: string
        /** @description A search term, searching in `"answer"`. */
        q?: string
        question?: number
        review?: number
        submission?: string
      }
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedAnswerList']
        }
      }
    }
  }
  'answers_create': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AnswerCreateRequest']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnswerCreate']
        }
      }
    }
  }
  'answers_retrieve': {
    parameters: {
      query?: {
        /** @description Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>. */
        expand?: ('options' | 'question' | 'question.submission_types' | 'question.tracks')[]
      }
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this answer. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Answer']
        }
      }
    }
  }
  'answers_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this answer. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AnswerRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Answer']
        }
      }
    }
  }
  'answers_destroy': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this answer. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'answers_partial_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this answer. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AnswerRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Answer']
        }
      }
    }
  }
  'mail_templates_list': {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description A search term, searching in `"role"`,`"subject"`. */
        q?: string
      }
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedMailTemplateList']
        }
      }
    }
  }
  'mail_templates_create': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MailTemplateRequest']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MailTemplate']
        }
      }
    }
  }
  'mail_templates_retrieve': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this mail template. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MailTemplate']
        }
      }
    }
  }
  'mail_templates_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this mail template. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MailTemplateRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MailTemplate']
        }
      }
    }
  }
  'mail_templates_destroy': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this mail template. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'mail_templates_partial_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this mail template. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MailTemplateRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MailTemplate']
        }
      }
    }
  }
  'question_options_list': {
    parameters: {
      query?: {
        /** @description Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>. */
        expand?: ('question' | 'question.submission_types' | 'question.tracks')[]
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description A search term, searching in `"answer"`. */
        q?: string
        question?: number
      }
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedAnswerOptionList']
        }
      }
    }
  }
  'question_options_create': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AnswerOptionCreateRequest']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnswerOptionCreate']
        }
      }
    }
  }
  'question_options_retrieve': {
    parameters: {
      query?: {
        /** @description Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>. */
        expand?: ('question' | 'question.submission_types' | 'question.tracks')[]
      }
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this answer option. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnswerOption']
        }
      }
    }
  }
  'question_options_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this answer option. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AnswerOptionRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnswerOption']
        }
      }
    }
  }
  'question_options_destroy': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this answer option. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'question_options_partial_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this answer option. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AnswerOptionRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnswerOption']
        }
      }
    }
  }
  'questions_list': {
    parameters: {
      query?: {
        /** @description Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>. */
        expand?: ('options' | 'submission_types' | 'tracks')[]
        is_public?: boolean
        is_visible_to_reviewers?: boolean
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description A search term, searching in `"question"`. */
        q?: string
        /**
         * @description Do you require an answer from every speaker or for every session?
         *
         *     `submission` - per proposal
         *     `speaker` - per speaker
         *     `reviewer` - for reviewers
         */
        target?: 'reviewer' | 'speaker' | 'submission'
        /**
         * @description * `number` - Number
         *     `string` - Text (one-line)
         *     `text` - Multi-line text
         *     `url` - URL
         *     `date` - Date
         *     `datetime` - Date and time
         *     `boolean` - Yes/No
         *     `file` - File upload
         *     `choices` - Choose one from a list
         *     `multiple_choice` - Choose multiple from a list
         */
        variant?: 'boolean' | 'choices' | 'date' | 'datetime' | 'file' | 'multiple_choice' | 'number' | 'string' | 'text' | 'url'
      }
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedQuestionList']
        }
      }
    }
  }
  'questions_create': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['QuestionOrgaRequest']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['QuestionOrga']
        }
      }
    }
  }
  'questions_retrieve': {
    parameters: {
      query?: {
        /** @description Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>. */
        expand?: ('options' | 'submission_types' | 'tracks')[]
      }
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this question. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Question']
        }
      }
    }
  }
  'questions_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this question. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['QuestionOrgaRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['QuestionOrga']
        }
      }
    }
  }
  'questions_destroy': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this question. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'questions_partial_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this question. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['QuestionOrgaRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['QuestionOrga']
        }
      }
    }
  }
  'reviews_list': {
    parameters: {
      query?: {
        /** @description Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>. */
        expand?: ('scores.category' | 'submission' | 'submission.speakers' | 'submission.submission_type' | 'submission.tags' | 'submission.track' | 'user')[]
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description A search term, searching in `"submission.title"`,`"user.name"`. */
        q?: string
        /** @description Filter by speaker code (for the submission being reviewed) */
        speaker?: number
        /** @description Filter by submission code */
        submission?: number
        /** @description Filter by reviewer code */
        user?: number
      }
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedReviewList']
        }
      }
    }
  }
  'reviews_create': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReviewWriteRequest']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Review']
        }
      }
    }
  }
  'reviews_retrieve': {
    parameters: {
      query?: {
        /** @description Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>. */
        expand?: ('scores.category' | 'submission' | 'user')[]
      }
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this review. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Review']
        }
      }
    }
  }
  'reviews_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this review. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReviewWriteRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Review']
        }
      }
    }
  }
  'reviews_destroy': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this review. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'reviews_partial_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this review. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReviewWriteRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Review']
        }
      }
    }
  }
  'rooms_list': {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number
        /** @description The initial index from which to return the results. */
        offset?: number
        /** @description A search term, searching in `"name"`. */
        q?: string
      }
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedRoomList']
        }
      }
    }
  }
  'rooms_create': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RoomOrgaRequest']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RoomOrga']
        }
      }
    }
  }
  'rooms_retrieve': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this room. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Room']
        }
      }
    }
  }
  'rooms_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this room. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RoomOrgaRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RoomOrga']
        }
      }
    }
  }
  'rooms_destroy': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this room. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'rooms_partial_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this room. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RoomOrgaRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RoomOrga']
        }
      }
    }
  }
  'schedules_list': {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description A search term, searching in `"version"`. */
        q?: string
      }
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedScheduleListList']
        }
      }
    }
  }
  'schedules_retrieve': {
    parameters: {
      query?: {
        /** @description Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>. */
        expand?: ('slots' | 'slots.room' | 'slots.submission' | 'slots.submission.speakers' | 'slots.submission.submission_type' | 'slots.submission.track')[]
      }
      header?: never
      path: {
        event: string
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Schedule']
        }
      }
    }
  }
  'schedules_exporters_retrieve': {
    parameters: {
      query?: {
        /** @description Language code for the export content. */
        lang?: string
      }
      header?: never
      path: {
        event: string
        id: string
        /** @description The name of the exporter. */
        name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Format depends on the chosen exporter. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Exporter or schedule not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'schedules_by_version_retrieve': {
    parameters: {
      query: {
        /** @description The version string/name of the schedule (e.g., '1.0', 'Final Version'). */
        version: string
      }
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      302: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description No response body */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'schedules_release_create': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ScheduleReleaseRequest']
      }
    }
    responses: {
      /** @description Schedule released successfully. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Schedule']
        }
      }
      /** @description Invalid data provided (e.g., version name already exists). */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Permission denied. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'slots_list': {
    parameters: {
      query?: {
        /** @description Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>. */
        expand?: ('room' | 'schedule' | 'submission' | 'submission.answers' | 'submission.answers.question' | 'submission.resources' | 'submission.speakers' | 'submission.submission_type' | 'submission.track')[]
        is_visible?: boolean
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description A search term, searching in `"submission.title"`,`"submission.speakers.name"`. */
        q?: string
        room?: number
        schedule?: number
        schedule_version?: string | null
        speaker?: number
        submission?: number
      }
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedTalkSlotList']
        }
      }
    }
  }
  'slots_retrieve': {
    parameters: {
      query?: {
        /** @description Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>. */
        expand?: ('room' | 'schedule' | 'submission' | 'submission.answers' | 'submission.answers.question' | 'submission.resources' | 'submission.speakers' | 'submission.submission_type' | 'submission.track')[]
      }
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this talk slot. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TalkSlot']
        }
      }
    }
  }
  'slots_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this talk slot. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TalkSlotRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TalkSlot']
        }
      }
    }
  }
  'slots_partial_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this talk slot. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TalkSlotRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TalkSlot']
        }
      }
    }
  }
  'slots_ical_retrieve': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this talk slot. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TalkSlot']
        }
      }
    }
  }
  'speaker_information_list': {
    parameters: {
      query?: {
        /** @description Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>. */
        expand?: ('limit_tracks' | 'limit_types')[]
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description A search term, searching in `"title"`. */
        q?: string
      }
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedSpeakerInformationList']
        }
      }
    }
  }
  'speaker_information_create': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SpeakerInformationRequest']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SpeakerInformation']
        }
      }
    }
  }
  'speaker_information_retrieve': {
    parameters: {
      query?: {
        /** @description Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>. */
        expand?: ('limit_tracks' | 'limit_types')[]
      }
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this speaker information. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SpeakerInformation']
        }
      }
    }
  }
  'speaker_information_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this speaker information. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SpeakerInformationRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SpeakerInformation']
        }
      }
    }
  }
  'speaker_information_destroy': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this speaker information. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'speaker_information_partial_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this speaker information. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SpeakerInformationRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SpeakerInformation']
        }
      }
    }
  }
  'speakers_list': {
    parameters: {
      query?: {
        /** @description Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>. */
        expand?: ('answers' | 'answers.question' | 'submissions')[]
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description A search term, searching in `"name"`. Organiser search also includes email addresses. */
        q?: string
      }
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedSpeakerList']
        }
      }
    }
  }
  'speakers_retrieve': {
    parameters: {
      query?: {
        /** @description Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>. */
        expand?: ('answers' | 'answers.question' | 'submissions')[]
      }
      header?: never
      path: {
        event: string
        user__code__iexact: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Speaker']
        }
      }
    }
  }
  'speakers_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        user__code__iexact: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SpeakerUpdateRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SpeakerOrga']
        }
      }
    }
  }
  'speakers_partial_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        user__code__iexact: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SpeakerUpdateRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SpeakerOrga']
        }
      }
    }
  }
  'submission_types_list': {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description A search term, searching in `"name"`. */
        q?: string
      }
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedSubmissionTypeList']
        }
      }
    }
  }
  'submission_types_create': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SubmissionTypeRequest']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SubmissionType']
        }
      }
    }
  }
  'submission_types_retrieve': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this submission type. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SubmissionType']
        }
      }
    }
  }
  'submission_types_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this submission type. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SubmissionTypeRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SubmissionType']
        }
      }
    }
  }
  'submission_types_destroy': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this submission type. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'submission_types_partial_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this submission type. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SubmissionTypeRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SubmissionType']
        }
      }
    }
  }
  'submissions_list': {
    parameters: {
      query?: {
        content_locale?: string
        /** @description Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>. */
        expand?: ('answers' | 'answers.question' | 'resources' | 'slots' | 'slots.room' | 'speakers' | 'speakers.answers' | 'submission_type' | 'tags' | 'track')[]
        is_featured?: boolean
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /**
         * @description * `submitted` - submitted
         *     `accepted` - accepted
         *     `confirmed` - confirmed
         *     `rejected` - rejected
         *     `canceled` - canceled
         *     `withdrawn` - withdrawn
         *     `deleted` - deleted
         *     `draft` - draft
         */
        pending_state?: ('accepted' | 'canceled' | 'confirmed' | 'deleted' | 'draft' | 'rejected' | 'submitted' | 'withdrawn' | null)[]
        /** @description A search term, searching in `"title"`,`"speaker.name"`. */
        q?: string
        /**
         * @description * `submitted` - submitted
         *     `accepted` - accepted
         *     `confirmed` - confirmed
         *     `rejected` - rejected
         *     `canceled` - canceled
         *     `withdrawn` - withdrawn
         *     `deleted` - deleted
         *     `draft` - draft
         */
        state?: ('accepted' | 'canceled' | 'confirmed' | 'deleted' | 'draft' | 'rejected' | 'submitted' | 'withdrawn')[]
        submission_type?: number
      }
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedSubmissionList']
        }
      }
    }
  }
  'submissions_create': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SubmissionOrgaRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SubmissionOrga']
        }
      }
    }
  }
  'submissions_retrieve': {
    parameters: {
      query?: {
        /** @description Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>. */
        expand?: ('answers' | 'resources' | 'slots' | 'slots.room' | 'speakers' | 'submission_type' | 'tags' | 'track')[]
      }
      header?: never
      path: {
        code__iexact: string
        event: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Submission']
        }
      }
    }
  }
  'submissions_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        code__iexact: string
        event: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SubmissionOrgaRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SubmissionOrga']
        }
      }
    }
  }
  'submissions_destroy': {
    parameters: {
      query?: never
      header?: never
      path: {
        code__iexact: string
        event: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'submissions_partial_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        code__iexact: string
        event: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SubmissionOrgaRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SubmissionOrga']
        }
      }
    }
  }
  'submissions_accept_create': {
    parameters: {
      query?: never
      header?: never
      path: {
        code__iexact: string
        event: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SubmissionRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Submission']
        }
      }
    }
  }
  'submissions_add_speaker_create': {
    parameters: {
      query?: never
      header?: never
      path: {
        code__iexact: string
        event: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AddSpeakerRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SubmissionOrga']
        }
      }
    }
  }
  'submissions_cancel_create': {
    parameters: {
      query?: never
      header?: never
      path: {
        code__iexact: string
        event: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SubmissionRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Submission']
        }
      }
    }
  }
  'submissions_confirm_create': {
    parameters: {
      query?: never
      header?: never
      path: {
        code__iexact: string
        event: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SubmissionRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Submission']
        }
      }
    }
  }
  'submissions_make_submitted_create': {
    parameters: {
      query?: never
      header?: never
      path: {
        code__iexact: string
        event: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SubmissionRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Submission']
        }
      }
    }
  }
  'submissions_reject_create': {
    parameters: {
      query?: never
      header?: never
      path: {
        code__iexact: string
        event: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SubmissionRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Submission']
        }
      }
    }
  }
  'submissions_remove_speaker_create': {
    parameters: {
      query?: never
      header?: never
      path: {
        code__iexact: string
        event: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RemoveSpeakerRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SubmissionOrga']
        }
      }
    }
  }
  'submissions_favourite_create': {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
        event: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Submission not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'submissions_favourite_destroy': {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
        event: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Submission not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'submissions_favourites_retrieve': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string[]
        }
      }
    }
  }
  'tags_list': {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description A search term, searching in `"tag"`. */
        q?: string
      }
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedTagList']
        }
      }
    }
  }
  'tags_create': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TagRequest']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Tag']
        }
      }
    }
  }
  'tags_retrieve': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this tag. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Tag']
        }
      }
    }
  }
  'tags_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this tag. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TagRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Tag']
        }
      }
    }
  }
  'tags_destroy': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this tag. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'tags_partial_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this tag. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TagRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Tag']
        }
      }
    }
  }
  'tracks_list': {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description A search term, searching in `"name"`. */
        q?: string
      }
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedTrackList']
        }
      }
    }
  }
  'tracks_create': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TrackRequest']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Track']
        }
      }
    }
  }
  'tracks_retrieve': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this track. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Track']
        }
      }
    }
  }
  'tracks_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this track. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TrackRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Track']
        }
      }
    }
  }
  'tracks_destroy': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this track. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'tracks_partial_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        event: string
        /** @description A unique integer value identifying this track. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TrackRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Track']
        }
      }
    }
  }
  'api_organisers_teams_list': {
    parameters: {
      query?: {
        /** @description Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>. */
        expand?: ('invites' | 'limit_tracks' | 'members')[]
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description A search term, searching in `"name"`. */
        q?: string
      }
      header?: never
      path: {
        organiser: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedTeamList']
        }
      }
    }
  }
  'api_organisers_teams_create': {
    parameters: {
      query?: never
      header?: never
      path: {
        organiser: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TeamRequest']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Team']
        }
      }
    }
  }
  'api_organisers_teams_retrieve': {
    parameters: {
      query?: {
        /** @description Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>. */
        expand?: ('invites' | 'limit_tracks' | 'members')[]
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this team. */
        id: number
        organiser: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Team']
        }
      }
    }
  }
  'api_organisers_teams_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A unique integer value identifying this team. */
        id: number
        organiser: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TeamRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Team']
        }
      }
    }
  }
  'api_organisers_teams_destroy': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A unique integer value identifying this team. */
        id: number
        organiser: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'api_organisers_teams_partial_update': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A unique integer value identifying this team. */
        id: number
        organiser: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TeamRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Team']
        }
      }
    }
  }
  'api_organisers_teams_invite_create': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A unique integer value identifying this team. */
        id: number
        organiser: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TeamInviteCreateRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Team']
        }
      }
    }
  }
  'api_organisers_teams_invites_destroy': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A unique integer value identifying this team. */
        id: number
        invite_id: number
        organiser: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'api_organisers_teams_remove_member_create': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A unique integer value identifying this team. */
        id: number
        organiser: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TeamMemberRemoveRequest']
      }
    }
    responses: {
      /** @description Member removed successfully. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Member cannot be removed as it may leave events inaccessible. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'File upload': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          file?: string
        }
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['FileResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
    }
  }
}
